<script>
/**
 * After init event
 */
afterInitFunction = async function(){
  console.log("call afterInitFunction")

  transactionBaseAddress = net_env === "mainnet" ? "https://etherscan.io/tx" : "https://goerli.etherscan.io/tx"
}

/**
 * form setting
 */
let formModal = document.getElementById("input-form-modal")
let closeFormBtn = document.getElementById("closeFormBtn")

let formDivNftContract = document.getElementById("form-div-nftContract");
let formDivMarketContract = document.getElementById("form-div-marketContract");
let formDivTokenId = document.getElementById("form-div-tokenId");
let formDivAddressFrom = document.getElementById("form-div-addressFrom");
let formDivAddressTo = document.getElementById("form-div-addressTo");
let formDivPrice = document.getElementById("form-div-price");

let inputNftContract = document.getElementById("form-nftContract");
let inputMarketContract = document.getElementById("form-marketContract");
let inputTokenId = document.getElementById("form-tokenId");
let inputAddressFrom = document.getElementById("form-addressFrom");
let inputAddressTo = document.getElementById("form-addressTo");
let inputPrice = document.getElementById("form-price");

const showForm = function(tokenId, from, to, price, closeCallback){
// const showForm = function(nft, market, tokenId, from, to, price, closeCallback){
  formModal.classList.remove("d-none");
  // nft ? formDivNftContract.classList.remove("d-none") : formDivNftContract.classList.add("d-none")
  // market ? formDivMarketContract.classList.remove("d-none") : formDivMarketContract.classList.add("d-none")
  tokenId ? formDivTokenId.classList.remove("d-none") : formDivTokenId.classList.add("d-none")
  from ? formDivAddressFrom.classList.remove("d-none") : formDivAddressFrom.classList.add("d-none")
  to ? formDivAddressTo.classList.remove("d-none") : formDivAddressTo.classList.add("d-none")
  price ? formDivPrice.classList.remove("d-none") : formDivPrice.classList.add("d-none")

  if(closeCallback) {
    closeFormBtn.onclick = () => {
      closeForm()
      closeCallback()
    }
  }
}
const clearForm = function(){
  inputNftContract.value = "";
  inputMarketContract.value = "";
  inputTokenId.value = "";
  inputAddressFrom.value = "";
  inputAddressTo.value = "";
  inputPrice.value = "";
}
const closeForm = function(){
  formModal.classList.add("d-none");
}
const setDefaultFormValue = async function(nft=true, market=true, tokenId=true, from=true, to=true, price=true){
  nft ? inputNftContract.value = nft_contract_address : inputNftContract.value = ""
  market ? inputMarketContract.value = nft_marketplace_address : inputMarketContract.value = ""
  tokenId ? inputTokenId.value = 0 : inputTokenId.value = ""
  from ? inputAddressFrom.value = await getAccount() : inputAddressFrom.value = ""
  to ? inputAddressTo.value = "" : inputAddressTo.value = ""
  price ? inputPrice.value = "" : inputPrice.value = ""
}
const hashToDomObj = function(hash, domObj){
  console.log("hash 테이블 보기")
  console.table(hash)

  console.log(domObj)
  let test = document.createElement("div");


  // 현재 처리중인 해시 보여주기
  let linkToEtherscan = document.createElement("a");
  linkToEtherscan.href = transactionBaseAddress + "/" + hash.transactionHash;
  linkToEtherscan.text = "이더스캔 보기";
  linkToEtherscan.target = "_blank";
  linkToEtherscan.classList.add("btn", "btn-primary");

  domObj.innerHTML = "";
  domObj.append(linkToEtherscan);
}


/**
 * 계정 이더 조회
 */
let getBalanceBtn = document.getElementById("getBalanceBtn");
getBalanceBtn.addEventListener("click", e=>{
  let outputWei = document.getElementById("get-balance-output-wei");
  let outputEth = document.getElementById("get-balance-output-eth");
  try {
    web3.eth.getBalance(inputAddressFrom.value, function (error, wei) {
      if (!error) {
        let balance = web3.utils.fromWei(wei, 'ether');
        outputWei.innerHTML = wei + " wei"
        outputEth.innerHTML = balance + " eth"
      }
    });
  } catch (err) {
    document.getElementById("output-error").innerHTML = err;
  }
})

/**
 * 컨트랙트 NFT 조회
 */
let searchNFTBtn = document.getElementById("searchNFTBtn");
let removeResultNFTsBtn = document.getElementById("removeResultNFTsBtn");
let nftResultDiv2 = document.getElementById("nft-result-div-2");
const clearCardDom = function(){
  nftResultDiv2.textContent = ""
}
const addOneNFTToCardDOM = async function(nft_metadata, targetDom){
  // get image from NFTMetadata
  let imageData = await fetch(changeUrlForCors(nft_metadata.image));
  if(imageData.ok){
    let tempBlob = await imageData.blob();
    let imageUrl = URL.createObjectURL(tempBlob)

    // make card component
    let wrapperDiv = document.createElement("div")
    wrapperDiv.classList.add("col-3")
    wrapperDiv.classList.add("my-3")

    // make card div
    let cardDiv = document.createElement("div");
    cardDiv.classList.add("card")

    let cardImage = document.createElement("img");
    cardImage.classList.add("card-img-top", "p-2");
    cardImage.src = imageUrl;

    let cardBody = document.createElement("div");
    cardBody.classList.add("card-body");

    let cardTitle = document.createElement("h5");
    cardTitle.classList.add("card-title");
    cardTitle.innerText = nft_metadata.name

    let cardText = document.createElement("p");
    cardText.classList.add("card-text");
    cardText.innerText = nft_metadata.description

    // combine div
    cardBody.append(cardTitle)
    cardBody.append(cardText)
    cardDiv.append(cardImage)
    cardDiv.append(cardBody)
    wrapperDiv.append(cardDiv)
    targetDom.append(wrapperDiv)
  } else {
    alert("imageData를 받아오지 못했습니다.")
    console.error(`NFTMetadataResponse.ok: ${imageData.ok}`)
    console.log(imageData)
  }
}
searchNFTBtn.addEventListener("click", async e => {
  try {
    // get metadata url from blockchain
    let NFTMetadataUrl = await nft_contract.tokenURI(Number(inputTokenId.value))

    // get metadata from NFTMetadataUrl
    let NFTMetadataResponse = await fetch(NFTMetadataUrl);

    if(NFTMetadataResponse.ok){
      let NFTMetadata = await NFTMetadataResponse.json();

      // add card dom
      await addOneNFTToCardDOM(NFTMetadata, nftResultDiv2);
    } else {
      alert("NFT 메타데이터를 불러오지 못했습니다.")
      console.error(`NFTMetadataResponse.ok: ${NFTMetadataResponse.ok}`)
      console.log(NFTMetadataResponse)
    }
  } catch (error) {
    alert("조회가 불가능합니다.")
    console.error(error)
  }
})
removeResultNFTsBtn.addEventListener("click", e => {
  clearCardDom();
})


/**
 * searchBalanceOf
 */
const searchBalanceOf = async function(){
  let getBalanceNftDiv = document.getElementById("get-balance-nft")
  try {
    let result = await nft_contract.balanceOf(inputAddressFrom.value);
    getBalanceNftDiv.innerHTML = "보유량 : " + result;
  } catch (error) {
    alert("error searchBalanceOf")
    console.log(error);
  }
}

/**
 * NFT Contract 정보 조회
 */
const getNFTContractInfo = async function(){
  let getNftContractInfo = document.getElementById("get-nft-contract-info")
  try {
    let name = await nft_contract.name();
    let symbol = await nft_contract.symbol();
    getNftContractInfo.innerText = `NFT Contract name: ${name}\n NFT Contract symbol: ${symbol}`
  } catch (error) {
    alert("error getNFTContractInfo")
    console.log(error);
  }
}

/**
 * NFT Owner 조회
 */
const getNFTOwner = async function(){
  let getNftOwner = document.getElementById("get-nft-owner")
  try {
    getNftOwner.innerText = "Owner: " + await nft_contract.ownerOf(inputTokenId.value);
  } catch (error) {
    alert("error getNFTOwner")
    console.log(error);
  }
}

/**
 * 마켓플레이스 수수료 조회
 */
const getListingPrice = async function(){
  let resultDiv = document.getElementById("marketplace-getListingPrice")
  try {
    resultDiv.innerText = "Listing Fee: " + await nft_contract.getListingPrice() + " wei";
  } catch (error) {
    alert("error getListingPrice")
    console.log(error);
  }
}

/**
 * 마켓플레이스 등록된 NFT
 */
const fetchMarketItems = async function(){
  let resultDiv = document.getElementById("marketplace-fetchMarketItems")
  try {
    let result = await nft_contract.fetchMarketItems();

    // TODO 데이터 가공
    console.log(result);
    resultDiv.innerText = result
  } catch (error) {
    alert("error fetchMarketItems")
    console.log(error);
  }
}

/**
 * 마켓플레이스 등록된 판매중인 내 NFT
 */
const fetchItemsListed = async function(){
  let resultDiv = document.getElementById("marketplace-fetchItemsListed")
  try {
    let result = await nft_contract.fetchItemsListed();
    console.log(result);
    resultDiv.innerText = result
  } catch (error) {
    alert("error fetchItemsListed")
    console.log(error);
  }
}

/**
 * 마켓플레이스 등록된 내 NFT
 */
const fetchMyNFTs = async function(){
  let resultDiv = document.getElementById("marketplace-fetchMyNFTs")
  try {
    let result = await nft_contract.fetchMyNFTs();
    console.log(result);
    resultDiv.innerText = result
  } catch (error) {
    alert("error fetchMyNFTs")
    console.log(error);
  }
}
/**
 * 마켓플레이스에 NFT 판매등록
 */
const createTokenWithPrice = async function(){
  console.log("call createTokenWithPrice")
  let resultDiv = document.getElementById("marketplace-createTokenWithPrice")
  try {
    // TODO
    // file upload and get uri
    // make metadata and upload to get uri
    // set _tokenURI and price
    let _tokenURI = "https://ipfs.moralis.io:2053/ipfs/QmYA5grqT1SHcinjJJM6v6NjpE5Nc2MT6PPYv5G3ia2WwF";
    let _price = inputPrice.value;

    let resultHash = await nft_contract.createTokenWithPrice(_tokenURI, _price)

    // 현재 처리중인 해시 보여주기
    hashToDomObj(resultHash, resultDiv)
  } catch (error) {
    alert("error createTokenWithPrice")
    console.log(error)
  }
}

/**
 * 마켓플레이스에 등록된 NFT 구매
 */
const createMarketSale = async function(){
  console.log("call createMarketSale")
  let resultDiv = document.getElementById("marketplace-createMarketSale")
  try {
    // TODO
    // file upload and get uri
    // make metadata and upload to get uri
    // set _tokenURI and price
    let _tokenId = inputTokenId.value;
    let _price = inputPrice.value;

    let resultHash = await nft_contract.createMarketSale(_tokenId, _price)

    // 현재 처리중인 해시 보여주기
    hashToDomObj(resultHash, resultDiv)
  } catch (error) {
    alert("error createMarketSale")
    console.log(error)
  }
}
/**
 * 마켓플레이스에 NFT 재판매등록
 */
const resellToken = async function(){
  console.log("call resellToken")
  let resultDiv = document.getElementById("marketplace-resellToken")
  try {
    let _tokenId = inputTokenId.value;
    let _price = inputPrice.value;

    let resultHash = await nft_contract.resellToken(_tokenId, _price)

    // 현재 처리중인 해시 보여주기
    hashToDomObj(resultHash, resultDiv)
  } catch (error) {
    alert("error resellToken")
    console.log(error)
  }
}

/**
 * 마켓플레이스의 수수료 ListingPrice 업데이트
 */
const updateListingPrice = async function(){
  console.log("call updateListingPrice")
  let resultDiv = document.getElementById("marketplace-updateListingPrice")
  try {
    let _listingPrice = inputPrice.value;

    let resultHash = await nft_contract.updateListingPrice(_listingPrice)

    // 현재 처리중인 해시 보여주기
    hashToDomObj(resultHash, resultDiv)
  } catch (error) {
    alert("error updateListingPrice")
    console.log(error)
  }
}

</script>
<div class="container">
  <div class="row">
    <div class="col-12">
      <h1>Contract Test</h1>
    </div>
  </div>

  <div class="accordion my-2">
    <div class="accordion-item">
      <h2 class="accordion-header" id="feature-head-1">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#feature-collapse-1" aria-expanded="true" aria-controls="feature-collapse-1">
          지갑 조회
        </button>
      </h2>
      <div id="feature-collapse-1" class="accordion-collapse collapse show" aria-labelledby="feature-head-1">
        <div class="accordion-body">
          <div class="row">
            <div class="col-12">
              <h5>지갑 eth/wei 조회</h5>
              <div>
                <div class="row">
                  <div class="col">
                    <button type="button" class="btn btn-primary" onclick="showForm(false, true, false, false, ()=>{getBalanceBtn.click()})">값입력</button>
                    <button type="button" class="btn btn-primary d-none" id="getBalanceBtn">조회</button>
                  </div>
                </div>
              </div>
              <div>
                <div id="get-balance-output-wei"></div>
                <div id="get-balance-output-eth"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="accordion-item">
      <h2 class="accordion-header" id="feature-head-2">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#feature-collapse-2" aria-expanded="false" aria-controls="feature-collapse-2">
          NFT 스마트 컨트랙트
        </button>
      </h2>
      <div id="feature-collapse-2" class="accordion-collapse collapse show" aria-labelledby="feature-head-2">
        <div class="accordion-body">
          <div class="row">
            <div class="col-12">
              <h5>NFT 조회</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="showForm(true, false, false, false, ()=>{searchNFTBtn.click()})">값입력</button>
              <button type="button" class="btn btn-primary d-none" id="searchNFTBtn">조회</button>
              <button type="button" class="btn btn-danger" id="removeResultNFTsBtn">검색 항목 모두삭제</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="nft-result-div-2">
              </div>
            </div>

            <div class="col-12">
              <h5>NFT 보유량 조회</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="showForm(false, true, false, false, ()=>{searchBalanceOf()})">값입력</button>
            </div>
            <div class="col-12">
              <div id="get-balance-nft"></div>
            </div>

            <div class="col-12">
              <h5>NFT Contract 정보 조회</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="getNFTContractInfo()">조회</button>
            </div>
            <div class="col-12">
              <div id="get-nft-contract-info"></div>
            </div>

            <div class="col-12">
              <h5>NFT Owner 조회</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="showForm(true, false, false, false, ()=>{getNFTOwner()})">값입력</button>
            </div>
            <div class="col-12">
              <div id="get-nft-owner"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="accordion-item">
      <h2 class="accordion-header" id="feature-head-3">
        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#feature-collapse-3" aria-expanded="false" aria-controls="feature-collapse-3">
          마켓플레이스 스마트 컨트랙트
        </button>
      </h2>
      <div id="feature-collapse-3" class="accordion-collapse collapse show" aria-labelledby="feature-head-3">
        <div class="accordion-body">
          <div class="row">
            <div class="col-12">
              <h5>Marketplace 수수료 조회</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="getListingPrice()">조회</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-getListingPrice"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace fetchMarketItems</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="fetchMarketItems()">조회</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-fetchMarketItems"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace my Listed NFT</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="fetchItemsListed()">조회</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-fetchItemsListed"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace purchased MyNFTs</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-primary" onclick="fetchMyNFTs()">조회</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-fetchMyNFTs"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace createTokenWithPrice</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-danger" onclick="showForm(false, false, false, true, ()=>{createTokenWithPrice()})">값입력</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-createTokenWithPrice"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace resellToken</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-danger" onclick="showForm(true, false, false, true, ()=>{resellToken()})">값입력</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-resellToken"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace createMarketSale</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-danger" onclick="showForm(true, false, false, true, ()=>{createMarketSale()})">값입력</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-createMarketSale"></div>
            </div>

            <div class="col-12">
              <h5>Marketplace updateListingPrice</h5>
            </div>
            <div class="col-12">
              <button type="button" class="btn btn-danger" onclick="showForm(false, false, false, true, ()=>{updateListingPrice()})">updateListingPrice</button>
            </div>
            <div class="col-12">
              <div class="row mt-3" id="marketplace-updateListingPrice"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="card d-none" id="input-form-modal" style="width: 800px; z-index: 2; position: absolute; top: 30%; left: 50%; transform: translate(-50%, -50%);">
  <div class="card-body">
    <div class="card-title">
      <h5>Input box</h5>
    </div>
    <div class="card-text">
      <div class="row">
        <div class="col-6 my-1 d-none" id="form-div-nftContract">
          <label for="basic-url" class="form-label">nftContract</label>
          <input type="text" id="form-nftContract" class="form-control" placeholder="nftContract"/>
        </div>
        <div class="col-6 my-1 d-none" id="form-div-marketContract">
          <label for="basic-url" class="form-label">marketContract</label>
          <input type="text" id="form-marketContract" class="form-control" placeholder="marketContract"/>
        </div>
        <div class="col-6 my-1" id="form-div-tokenId">
          <label for="basic-url" class="form-label">tokenId</label>
          <input type="text" id="form-tokenId" class="form-control" placeholder="tokenId"/>
        </div>
        <div class="col-6 my-1" id="form-div-addressFrom">
          <label for="basic-url" class="form-label">addressFrom</label>
          <input type="text" id="form-addressFrom" class="form-control" placeholder="addressFrom"/>
        </div>
        <div class="col-6 my-1" id="form-div-addressTo">
          <label for="basic-url" class="form-label">addressTo</label>
          <input type="text" id="form-addressTo" class="form-control" placeholder="addressTo"/>
        </div>
        <div class="col-6 my-1" id="form-div-price">
          <label for="basic-url" class="form-label">price</label>
          <input type="text" id="form-price" class="form-control" placeholder="price"/>
        </div>
        <div class="col-12 my-2 text-center">
          <button type="button" class="btn btn-danger" onclick="setDefaultFormValue(true, true, true, true, true, true)">기본값</button>
          <button type="button" class="btn btn-danger" onclick="clearForm()">초기화</button>
          <button type="button" class="btn btn-primary" id="closeFormBtn" >실행</button>
          <button type="button" class="btn btn-link" onclick="closeForm()">닫기</button>
        </div>
      </div>
    </div>
  </div>
</div>
